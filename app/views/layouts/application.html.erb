<!DOCTYPE html>
<html>

<head>
  <title>Dashboard</title>
	<%= stylesheet_link_tag    "application" %>
	<%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>

<body class="size-medium">

  <div id="mv-topbar">
    <ul style="display:inline;">
      <h1 id="mv-logo"><a href="/widgets"><span class="discreet">the</span>Eye</a></h1>
    </ul>
		<span id="clock">18:32<span class="seconds">:23</span><span class="milliseconds">:120</span></span>
  </div>
  <hr style="clear:both; border:none;" />
	
	<div id="page">
		<%= yield %>
	</div>

	<ul id="colors" style="display:none;">
		<li class="service-status-disabled"><h3>disabled</h3></li>
		<li class="service-status-ok"><h3>ok</h3></li>
		<li class="service-status-alert"><h3>alert</h3></li>
		<li class="service-status-warning"><h3>warning</h3></li>
		<li class="service-status-failed"><h3>failed</h3></li>
		<li class="very-light-color"><h3>verylight</h3></li>
	</ul>
	<script>
	
	$widgets = {
		
		<% for widget in ::Widget.all %>
		'widget-<%= widget.id %>'	: 
		{
			'title' 				: '<%= widget.title %>',
			'url'						: 'http://google.com',
			'template' 			: '<%= widget.template.uid %>',
			'data'					:
			{
				'monitored_value' : 0,
				'details'					: '',
			},
			'refresh_delay'	: 1000, //parseInt(Math.random() * 8) * 1000 + 1000,
		},
		<% end %>
	}
	
	
	function refresh_widget_js_bind() {
		
		$(".widget").unbind();
		
		$('.widget').on('click', function(event,value) {

			$card = $(this).find('.card');
			if ($($card).hasClass('flipped'))
				$($card).removeClass('flipped');
			else
				$($card).addClass('flipped');
				
			return false;
		});
	}
	
	$(document).ready(function() {
				
		resize_page();
		refreshWidgets($widgets);
		$("#widgets").sortable();
		//refreshWidgets();
		setInterval(function(){refreshWidgets($widgets)}, 1000);			
	});
	
	function resize_page() {
		
		$width = $(window).width();
		$new_width = Math.floor($width / 200) * 200;
		$('#page').css('width',$new_width);		
		$('#page').css('left', '5px');		
		$('body').css('height',$(window).height());
	}
	
	$(window).resize(function() {
		
		resize_page();
		
	});
	
	</script>
	
	<!-- codemirror 
		http://codemirror.net
	-->
	
	<script>
	
		var editor = CodeMirror.fromTextArea(document.getElementById("template_body"), {
			mode: 'xml', 
			tabMode: "indent"
		});
		editor.setOption("theme", 'ambiance');
	
	</script>
	
	<!-- Templates -->
	
	<% for template in ::Template.all %>
		<%= render :partial => template %>
	<% end %>
	
	<script>		

	//$now = new Date();
	alert(color_for_status('ok'));
	
	
	function test_graph_template_did_appear(name, widget) {

		$service_warning			= false;
		$service_alert				= false;
		
		$threshold_warning 		= 90;
		$threshold_alert			= 97;
		
		$time_scale 					= 60; //(in second)

		$sample_count					= $time_scale / (widget.refresh_delay / 1000) + 1;
		
		$color_ok 			= theme_color_for_class('service-status-ok');
		$color_warning 	= theme_color_for_class('service-status-warning');
		$color_alert		= theme_color_for_class('service-status-alert');
		$fill_color			= theme_color_for_class('very-light-color');
		$grid_color			= theme_color_for_class('service-status-disabled');
		
		$value = widget.data.monitored_value
		
		if ($value > $threshold_alert) {
				$service_alert = true;
		}
		else if ($value > $threshold_warning ) {
				$service_warning = true;
		}
				
		if (window[name+'_graph_data'] == null) {
			
			window[name+'_graph_data'] = [];
				
				$now = Date.parse(new Date());
				window[name+'_graph_data'].push([$now, 
													 					     0])
		}

		if (window[name+'_graph_data'].length > $sample_count) {
			window[name+'_graph_data'].shift();
		}

		$now = Date.parse(new Date());
		
    window[name+'_graph_data'].push([$now, 
													 					 $value]);
		
		$.plot($('#'+ name + ' .plot-chart'), 
			[ { 
			data: window[name+'_graph_data'],
      color: $color_ok,
			shadowSize: 0,
      constraints: [
				{
					threshold: $threshold_alert,
				  color: $color_alert,
					evaluate : function(y,threshold){ return y > threshold; }
				},
				{ 
					threshold: $threshold_warning,
					color: $color_ok,
					evaluate : function(y,threshold){ return y > threshold; }
				}
			]
		} ], {
		  series: { 
			  lines: { lineWidth: 1, show: true, fill: true, fillColor: $fill_color },
			  points: { show: false }
		  },
		  grid: { hoverable: true, clickable: true, color: $grid_color },
	  	yaxis: {min: 0, max: 100},
			xaxis: {min: $now-($time_scale*1000), max: $now}
	  });

		$('#'+ name + ' .plot-chart').bind("plothover", function (event, pos, item) {
			//alert('plothover');
		});
					
		
		if ($service_alert) {
			return 'alert'
		}
		else if ($service_warning) {
			return 'warning'			
		}
		else
			return 'ok'
	}
</script>
	
</body>
</html>
